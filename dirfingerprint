#!/usr/bin/env python3
_V='20210323' #sub-commands with diff
#_V='20210303' #f'{NUM:,}'
#_V='20201006' #Minor header change
#_V='20200609' #Depth
#_V='20200524' #-b
#_V='20191011' #-d
#_V='20190424' #fix a bug with gluster, and compatible with python3.4
#_V='20190411' #Add SubdirCount, and Fingerprint calculation v1 -> v2
#_V='20190410' #print non-utf-8 character
#_V='20190409' #refactor on-the-fly
#_V='20190204' #print stats on-the-fly
#_V='20190119' #default current folder
#_V='20190108' #support multiple directories now
#_V='20190107' #initial github release
import sys, argparse, subprocess, os.path, datetime, pickle, threading, hashlib

## Hash
class DirHashObj:
	def __init__(self, cwd, printdir, prefix, level, args):
		self.files = []
		self.dirs = {}
		self.special_count = 0
		try:
			for ld in sorted(os.listdir(prefix + cwd)):
				if args.gluster_brick == ['SSH'] and ld == '.glusterfs': continue
				fullpath = prefix + cwd + '/' + ld
				if os.path.islink(fullpath):
					self.special_count += 1
				elif os.path.isfile(fullpath):
					ls = os.lstat(fullpath)
					if args.gluster_brick == ['SSH'] and ls.st_size == 0 and ls.st_mode == 33280: continue
					file_size = ls.st_blocks if args.blocks else ls.st_size
					self.files.append([ld, file_size, int(ls.st_mtime)])
				elif os.path.isdir(fullpath):
					if os.path.ismount(fullpath) and args.one_file_system: continue
					self.dirs[ld] = DirHashObj(cwd + '/' + ld, printdir + '/' + ld, prefix, level+1, args)
				else:
					self.special_count += 1
		except PermissionError as e:
			print(e, file=sys.stderr)
		if args.gluster_brick != ['SSH']: self.finger_print(printdir, False, level, args)
	def _to_iso_if_not_utf8(sin):
		try:
			return sin.encode('utf-8', 'surrogateescape').decode('utf-8')
		except UnicodeDecodeError:
			return sin.encode('utf-8', 'surrogateescape').decode('iso-8859-1')
	def finger_print(self, path, from_ssh, level, args):
		self.total_bytes = sum([f[1] for f in self.files])
		self.total_count = len(self.files)
		self.subdir_count = len(self.dirs)
		if self.total_count > 0:
			f_times = [f[2] for f in self.files]
			self.min_time = min(f_times)
			self.max_time = max(f_times)
		else:
			self.min_time = sys.maxsize
			self.max_time = 0
		md5 = hashlib.md5()
		md5.update(('%d %d\n' % (self.subdir_count, self.special_count)).encode())
		for fname, fsize, ftime in sorted(self.files):
			md5.update(('%s %d %d\n' % (fname, fsize, ftime)).encode('utf-8', 'surrogateescape'))
		for child_cwd, child_dir in sorted(self.dirs.items()):
			if from_ssh: child_dir.finger_print(path + '/' + child_cwd, from_ssh, level+1, args)
			self.total_bytes += child_dir.total_bytes
			self.total_count += child_dir.total_count
			self.subdir_count += child_dir.subdir_count
			if self.min_time > child_dir.min_time: self.min_time = child_dir.min_time
			if self.max_time < child_dir.max_time: self.max_time = child_dir.max_time
			self.special_count += child_dir.special_count
			md5.update(('%s %s\n' % (child_cwd, child_dir.md5sum)).encode('utf-8', 'surrogateescape'))
		self.md5sum = md5.hexdigest()
		if self.total_count == 0:
			s_min_time = 'NA'
			s_max_time = 'NA'
		else:
			s_min_time = datetime.datetime.fromtimestamp(self.min_time).isoformat()
			s_max_time = datetime.datetime.fromtimestamp(self.max_time).isoformat()
		if level <= args.max_depth or args.max_depth < 0:
			print(self.md5sum, f'{self.total_bytes:,}', f'{self.total_count:,}', s_min_time, s_max_time, f'{self.subdir_count:,}', f'{self.special_count:,}', f'{level:,}', DirHashObj._to_iso_if_not_utf8(path), sep='\t')
		self.dirs.clear()
	def add_dir(self, ano):
		self.files += ano.files
		self.special_count += ano.special_count
		for ano_cwd, ano_child in ano.dirs.items():
			self_child = self.dirs.get(ano_cwd)
			if self_child is None:
				self.dirs[ano_cwd] = ano_child
			else:
				self_child.add_dir(ano_child)

def ssh(brick_dirs, idx, args, realexe, brick_name, realdir):
	cmd = realexe
	if args.one_file_system: cmd += ' -x'
	cmd += ' --gluster-brick=SSH ' + realdir
	brick_dirs[idx] = pickle.loads(subprocess.check_output(['ssh', brick_name, cmd]))

def do_one_dir(args, onedir):
	realdir = os.path.realpath(onedir)
	if not os.path.isdir(realdir):
		raise Exception('ERR-001: %s is not a directory' % realdir)
	if args.gluster_brick is not None and args.blocks:
		raise Exception('ERR-002: --blocks cannot be used with --gluster-bricks')
	if args.gluster_brick is not None and args.gluster_brick != ['SSH']:
		brick_names, prefixes = [], []
		for s in args.gluster_brick:
			sp = s.split(':')
			brick_names.append(sp[0])
			prefixes.append(sp[1])
		threads = []
		realexe = os.path.realpath(sys.argv[0])
		brick_dirs = [0 for i in range(len(brick_names))]
		for idx in range(len(brick_names)):
			t = threading.Thread(target=ssh, args=(brick_dirs, idx, args, realexe, brick_names[idx], prefixes[idx] + realdir))
			t.start()
			threads.append(t)
		for idx in range(len(brick_names)):
			threads[idx].join()
			if idx == 0:
				root = brick_dirs[idx]
			else:
				root.add_dir(brick_dirs[idx])
		root.finger_print(onedir, True, 0, args)
	else:
		root = DirHashObj('', onedir, realdir, 0, args)
		if args.gluster_brick == ['SSH']: sys.stdout.buffer.write(pickle.dumps(root))

def sub_hash(args):
	print('FingerPrint\tFile', 'Blocks' if args.blocks else 'Bytes', '\tFileCount\tFileMinMtime\tFileMaxMtime\tSubdirCount\tSpecialCount\tDepth\tDir', sep='')
	if args.DIR == []: args.DIR = '.'
	for onedir in args.DIR:
		while len(onedir) > 1 and onedir[-1] == '/': onedir = onedir[:-1]
		do_one_dir(args, onedir)

## Diff
class DirDiffObj:
	def diff(self):
		suffix, dels, adds = [], [], []
		print('ChangedMovedDeletedAdded\tDir')
		self.print_changed(suffix, dels, adds)
		self.print_moved_deleted_added(dels, adds)
	def print_moved_deleted_added(self, dels, adds):
		dels.sort()
		adds.sort()
		deli, addi = len(dels) - 1, len(adds) - 1
		while deli >= 0 and addi >= 0:
			if dels[deli][0] == adds[addi][0]:
				print('M', '/'.join(dels[deli][1]), '->', '/'.join(adds[addi][1]), sep='\t')
				del dels[deli]
				del adds[addi]
				deli -= 1
				addi -= 1
			elif dels[deli][0] > adds[addi][0]:
				deli -= 1
			else:
				addi -= 1
		for it in dels:
			print('D', '/'.join(it[1]), sep='\t')
		for it in adds:
			print('A', '/'.join(it[1]), sep='\t')
	def print_changed(self, suffix, dels, adds):
		changed = False
		if hasattr(self, 'dirs'): 
			for path, child in self.dirs.items():
				if child.print_changed(suffix + [path], dels, adds):
					changed = True
		if changed: return changed
		if not hasattr(self, 'fingerprint'): return changed
		if len(self.fingerprint) == 1:
			dels.append((self.fingerprint[0], suffix))
			return True
		if self.fingerprint[0] == self.fingerprint[1]:
			return False
		if self.fingerprint[0] == '':
			adds.append((self.fingerprint[1], suffix))
		else:
			print('C', '/'.join(suffix), sep='\t')
		return True
	def add(self, path, fingerprint, is_first, idx):
		if not hasattr(self, 'dirs'):
			self.dirs = {}
		if idx < len(path):
			child = self.dirs.setdefault(path[idx], DirDiffObj())
			child.add(path, fingerprint, is_first, idx+1)
		elif is_first:
			if hasattr(self, 'fingerprint'):
				raise Exception(f'ERR-005: f{path} already had a fingerprint the first')
			self.fingerprint = [fingerprint]
		else:
			if not hasattr(self, 'fingerprint'):
				self.fingerprint = ['']
			if len(self.fingerprint) != 1:
				raise Exception(f'ERR-006: f{path} already had a fingerprint in the second file')
			self.fingerprint.append(fingerprint)
	def read_file(self, dfpfile, is_first):
		fp = open(dfpfile)
		self.is_dfp_or_die(fp)
		row = 1
		for ln in fp:
			row += 1
			fs = ln.split('\t')
			if len(fs) != 9 or ln[-1] != '\n': 
				raise Exception(f'ERR-004: row {row} in {dfpfile} is incomplete')
			path = fs[8][:-1].split('/')
			self.add(path, fs[0], is_first, 0)
		fp.close()
	def is_dfp_or_die(self, fp):
		if fp.readline() not in [ 'FingerPrint\tFileBytes\tFileCount\tFileMinMtime\tFileMaxMtime\tSubdirCount\tSpecialCount\tDepth\tDir\n', 'FingerPrint\tFileBlocks\tFileCount\tFileMinMtime\tFileMaxMtime\tSubdirCount\tSpecialCount\tDepth\tDir\n']: 
			raise Exception(f'ERR-003: {dfpfile} is not a dirfingerprint output file')

def sub_diff(args):
	dfp = DirDiffObj()
	dfp.read_file(args.FILE[0], True)
	dfp.read_file(args.FILE[1], False)
	dfp.diff()

def main():
	parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
		description='''
sub-command 'hash' recursively calculates a hash for each sub-directory, sub-command 'diff' compare two 'hash' output files
''')
	parser.add_argument("--version", action="store_true", help="output version information and exit")
	subs = parser.add_subparsers(description='use -h with each sub-command')
	parser_hash = subs.add_parser('hash')
	parser_hash.add_argument("DIR", help="directory", nargs='*')
	parser_hash.add_argument("-x", "--one-file-system", action="store_true", help="skip directories on different file systems")
	parser_hash.add_argument("-d", "--max-depth", type=int, default=-1, help="print subdirectories at most DEPTH, negative integer prints every subdirectory")
	parser_hash.add_argument("-b", "--blocks", action="store_true", help="calculate st_blocks instead of st_size")
	parser_hash.add_argument("--gluster-brick", help="HOSTNAME:PREFIX", action='append')
	parser_hash.set_defaults(func=sub_hash)
	parser_diff = subs.add_parser('diff')
	parser_diff.add_argument("FILE", nargs=2, help="compare two dirfingerprint output files")
	parser_diff.set_defaults(func=sub_diff)
	args = parser.parse_args()
	if args.version: 
		print(_V)
	elif hasattr(args, 'func'):
		args.func(args)
	else:
		parser.print_help()

if __name__ == '__main__': main()
